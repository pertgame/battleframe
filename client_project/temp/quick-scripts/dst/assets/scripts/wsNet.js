
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/wsNet.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'f5f02ULtVhD47PNH08lZ5uR', 'wsNet');
// scripts/wsNet.js

"use strict";

/**
 * websocket 
 */
var Global = require("common"); //心跳检测


var HeartCheck = {
  timeout: 50000,
  //50秒 稍微比服务器小一点，让服务器网络波动有个缓冲时间
  svrtimeout: 60000,
  //60秒
  timeoutObj: null,
  serverTimeoutObj: null,
  disconnectioned: false,
  reconnectTimeoutobj: null,
  reset: function reset() {
    clearTimeout(this.timeoutObj);
    clearTimeout(this.serverTimeoutObj);
    return this;
  },
  startHeartBeat: function startHeartBeat() {
    var self = this;
    this.timeoutObj = setTimeout(function () {
      //这里发送一个心跳，后端收到后，返回一个心跳消息，onmessage拿到返回的心跳就说明连接正常
      cc.log("send heart beat...");

      if (Global.ws == null) {
        return;
      }

      var buff = new ArrayBuffer(12);
      var data = new Uint32Array(buff);
      data[0] = Global.MID_HeartBeat; //消息ID

      data[1] = 1; //消息长度

      data[2] = 0; //anything 随意填充一个数

      Global.ws.send(data);
      self.serverTimeoutObj = setTimeout(function () {
        //心跳超时主动断开
        cc.log("close connection...");

        if (Global.ws == null) {
          return;
        }

        Global.ws.close(); //self.disconnectioned = true
      }, self.svrtimeout);
    }, this.timeout);
  },
  hasDisconnected: function hasDisconnected() {
    return this.disconnectioned;
  },
  stopReconnectTimer: function stopReconnectTimer() {
    //cc.log("close reconnectTimeout...")
    clearTimeout(this.reconnectTimeoutobj);
  }
};
/**
 * 消息回复处理
 */

var MessageStateFunc = {
  /**
   * 消息解析 
   * 0: 消息id
   * 1：消息长度
   * 2：sessionid
   * 3：nodex x坐标正负标记
   * 4：nodex x坐标值
   * 5：nodey y坐标正负标记
   * 6：nodey y坐标值 
   */
  onlogin: function onlogin(data) {
    if (data[2] == 1) {
      Global.mySessionId = data[3];
    } else {
      return;
    }

    cc.log("ws message MID_login: ", data[2], data[3], data[4], data[5], data[6], data[7], data[8]);
    Global.LoginSucc = data[2];
    var nodex = data[5];
    var nodey = data[7];

    if (data[4] == 2) {
      nodex = 0 - nodex;
    }

    if (data[6] == 2) {
      nodey = 0 - nodey;
    }

    Global.MosterPosX = nodex;
    Global.MosterPosY = nodey;
    Global.MonsterScore = data[8];
  },
  onlogout: function onlogout(data) {
    var key = data[2].toString();
    cc.log("ws message MID_logout, sessionid: ", key);
    Global.DelPlayerIds.push(key);
    Global.PlayerSessionMap["delete"](key);
  },
  onmove: function onmove(data) {
    cc.log("ws message MID_move: ", data[1], data[2], data[3], data[4], data[5], data[6]);
    var key = data[6].toString();
    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    var playerProp = {
      sessionId: data[6],
      nodex: nodex,
      nodey: nodey
    };

    if (Global.PlayerSessionMap.has(key) == false) {
      Global.PlayerSessionMap.set(key, playerProp);
    }

    Global.NewplayerMap.set(key, playerProp);
    Global.newPlayerIds.push(key); //cc.log("MID_move purple monsters: ", Global.newPlayerIds.length, key, Global.NewplayerMap.has(key))
  },
  onBump: function onBump(data) {
    /**
     *  0: 消息ID
        1：消息长度
        2: 成功失败标志 (失败则只需要前三个字段)
        3: 星星x坐标正负标志
        4: 星星x坐标
        5：星星y坐标正负标志
        6：星星y坐标
        */
    if (data[2] == 0) {
      //失败
      cc.log("ws message MID_Bump fail ... ");
      return;
    }

    cc.log("ws message MID_Bump: ", data[1], data[2], data[3], data[4], data[5], data[6], data[7]);
    var nodex = data[4];
    var nodey = data[6];

    if (data[3] == 2) {
      nodex = 0 - nodex;
    }

    if (data[5] == 2) {
      nodey = 0 - nodey;
    }

    Global.BumpedPlayerId = data[7];
    var starProp = {
      nodex: nodex,
      nodey: nodey
    };
    Global.newStarPos.set(Global.newStarKey, starProp);
  },
  onHeartBeat: function onHeartBeat(data) {
    cc.log("ws message MID_HeartBeat...");
  },
  onStarBorn: function onStarBorn(data) {
    cc.log("ws message MID_StarBorn: ", data[2], data[3], data[4], data[5]);
    /**
     *  0: 消息ID
        1：消息长度
        2: 星星x坐标正负标志
        3: 星星x坐标
        4：星星y坐标正负标志
        5：星星y坐标
     */

    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    var starProp = {
      nodex: nodex,
      nodey: nodey
    };
    Global.newStarPos.set(Global.newStarKey, starProp);
  },
  onGM: function onGM(data) {
    cc.log("ws message MID_GM...");
  },
  Online4Other: function Online4Other(data) {
    cc.log("ws message MID_Online4Other: ", data[2], data[3], data[4], data[5], data[6]);
    var key = data[6].toString();
    var nodex = data[3];
    var nodey = data[5];

    if (data[2] == 2) {
      nodex = 0 - nodex;
    }

    if (data[4] == 2) {
      nodey = 0 - nodey;
    }

    cc.log("pos: ", nodex, nodey);
    var playerProp = {
      sessionId: data[6],
      nodex: nodex,
      nodey: nodey
    };

    if (Global.PlayerSessionMap.has(key) == false) {
      Global.PlayerSessionMap.set(key, playerProp);
    }

    Global.NewplayerMap.set(key, playerProp);
    Global.newPlayerIds.push(key);
    Global.syncOnline4Other = true;
  },
  onRegister: function onRegister(data) {
    cc.log("ws message MID_Register: ", data[2]);
    Global.RegisterSucc = data[2];
  },

  /**
   * 
   * @param {*} data only request, not response...
   */
  onSyncPos: function onSyncPos(data) {
    cc.log("ws message MID_SyncPos...");
  },
  onMonsterInfo: function onMonsterInfo(data) {
    cc.log("ws message MID_MonsterInfo: ", data[2], data[3]);
    Global.MonsterScore = data[3];
  },
  onLogicFrameSync: function onLogicFrameSync(data) {
    cc.log("ws message MID_LogicFrameSync: ", data[2], data[3], data[4], data[5], data[6]);
  }
};
cc.Class({
  //extends: cc.Component,

  /*
  readyState:
      CONNECTING 0
      OPEN       1
      CLOSING    2
      CLOSED     3
  */
  CanSendMsg: function CanSendMsg() {
    if (Global.ws == null) {
      return false;
    }

    return Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN;
  },
  swConnect: function swConnect() {
    if (Global.ws != null) {
      //return
      //cc.log("readyState: ", Global.ws.readyState)
      if (Global.ws.readyState == WebSocket.CONNECTING || Global.ws.readyState == WebSocket.OPEN) {
        //已经连上就不必再连
        return;
      }
    }

    var self = this;
    cc.log("addr: ", Global.wsAddr, Global.ws == null);
    var ws = new WebSocket(Global.wsAddr);

    ws.onopen = function (e) {
      cc.log("ws open: ", ws.readyState); //发送心跳

      HeartCheck.reset().startHeartBeat();
    };

    ws.onmessage = function (e) {
      var data = new Uint32Array(e.data);
      var msgid = data[0];

      switch (msgid) {
        case Global.MID_login:
          MessageStateFunc.onlogin(data);
          break;

        case Global.MID_logout:
          MessageStateFunc.onlogout(data);
          break;

        case Global.MID_move:
          MessageStateFunc.onmove(data);
          break;

        case Global.MID_Bump:
          MessageStateFunc.onBump(data);
          break;

        case Global.MID_HeartBeat:
          MessageStateFunc.onHeartBeat(data);
          break;

        case Global.MID_StarBorn:
          MessageStateFunc.onStarBorn(data);
          break;

        case Global.MID_GM:
          MessageStateFunc.onGM(data);
          break;

        case Global.MID_Online4Other:
          MessageStateFunc.Online4Other(data);
          break;

        case Global.MID_Register:
          MessageStateFunc.onRegister(data);
          break;

        case Global.MID_SyncPos:
          MessageStateFunc.onSyncPos(data);
          break;

        case Global.MID_MonsterInfo:
          MessageStateFunc.onMonsterInfo(data);
          break;

        case Global.MID_LogicFrameSync:
          MessageStateFunc.onLogicFrameSync(data);
          break;

        default:
          cc.log("未知 消息id: ", msgid);
      } //发送心跳


      HeartCheck.reset().startHeartBeat();
    };

    ws.onerror = function (e) {
      cc.log("ws error: ", ws.readyState); //Global.ws = null

      if (HeartCheck.hasDisconnected() == false) {
        HeartCheck.stopReconnectTimer();
        HeartCheck.reconnectTimeoutobj = setTimeout(function () {
          self.swConnect();
        }, 1000);
      } else {
        HeartCheck.stopReconnectTimer();
      }
    };

    ws.onclose = function (e) {
      cc.log("ws close: ", ws.readyState); //Global.ws = null

      if (HeartCheck.hasDisconnected() == false) {
        HeartCheck.stopReconnectTimer();
        HeartCheck.reconnectTimeoutobj = setTimeout(function () {
          self.swConnect();
        }, 1000);
      } else {
        HeartCheck.stopReconnectTimer();
      }
    };

    cc.log("global ws init, state: ", ws.readyState);
    Global.ws = ws;
  },

  /**
   * 
   * @param {*} data  具体数据, 1：长度，2：是否广播，3：... 具体消息数据
   */
  sendwsmessage: function sendwsmessage(data) {
    if (Global.ws == null) {
      return;
    }

    if (Global.ws != null) {
      if (Global.ws.readyState == WebSocket.CLOSED || Global.ws.readyState == WebSocket.CLOSING) {
        //正在断开或者已经断开，则不能发送消息
        return;
      }
    } //cc.log("ws sendwsmessage: ", Global.ws.readyState)


    Global.ws.send(data);
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0cy9zY3JpcHRzL3dzTmV0LmpzIl0sIm5hbWVzIjpbIkdsb2JhbCIsInJlcXVpcmUiLCJIZWFydENoZWNrIiwidGltZW91dCIsInN2cnRpbWVvdXQiLCJ0aW1lb3V0T2JqIiwic2VydmVyVGltZW91dE9iaiIsImRpc2Nvbm5lY3Rpb25lZCIsInJlY29ubmVjdFRpbWVvdXRvYmoiLCJyZXNldCIsImNsZWFyVGltZW91dCIsInN0YXJ0SGVhcnRCZWF0Iiwic2VsZiIsInNldFRpbWVvdXQiLCJjYyIsImxvZyIsIndzIiwiYnVmZiIsIkFycmF5QnVmZmVyIiwiZGF0YSIsIlVpbnQzMkFycmF5IiwiTUlEX0hlYXJ0QmVhdCIsInNlbmQiLCJjbG9zZSIsImhhc0Rpc2Nvbm5lY3RlZCIsInN0b3BSZWNvbm5lY3RUaW1lciIsIk1lc3NhZ2VTdGF0ZUZ1bmMiLCJvbmxvZ2luIiwibXlTZXNzaW9uSWQiLCJMb2dpblN1Y2MiLCJub2RleCIsIm5vZGV5IiwiTW9zdGVyUG9zWCIsIk1vc3RlclBvc1kiLCJNb25zdGVyU2NvcmUiLCJvbmxvZ291dCIsImtleSIsInRvU3RyaW5nIiwiRGVsUGxheWVySWRzIiwicHVzaCIsIlBsYXllclNlc3Npb25NYXAiLCJvbm1vdmUiLCJwbGF5ZXJQcm9wIiwic2Vzc2lvbklkIiwiaGFzIiwic2V0IiwiTmV3cGxheWVyTWFwIiwibmV3UGxheWVySWRzIiwib25CdW1wIiwiQnVtcGVkUGxheWVySWQiLCJzdGFyUHJvcCIsIm5ld1N0YXJQb3MiLCJuZXdTdGFyS2V5Iiwib25IZWFydEJlYXQiLCJvblN0YXJCb3JuIiwib25HTSIsIk9ubGluZTRPdGhlciIsInN5bmNPbmxpbmU0T3RoZXIiLCJvblJlZ2lzdGVyIiwiUmVnaXN0ZXJTdWNjIiwib25TeW5jUG9zIiwib25Nb25zdGVySW5mbyIsIm9uTG9naWNGcmFtZVN5bmMiLCJDbGFzcyIsIkNhblNlbmRNc2ciLCJyZWFkeVN0YXRlIiwiV2ViU29ja2V0IiwiQ09OTkVDVElORyIsIk9QRU4iLCJzd0Nvbm5lY3QiLCJ3c0FkZHIiLCJvbm9wZW4iLCJlIiwib25tZXNzYWdlIiwibXNnaWQiLCJNSURfbG9naW4iLCJNSURfbG9nb3V0IiwiTUlEX21vdmUiLCJNSURfQnVtcCIsIk1JRF9TdGFyQm9ybiIsIk1JRF9HTSIsIk1JRF9PbmxpbmU0T3RoZXIiLCJNSURfUmVnaXN0ZXIiLCJNSURfU3luY1BvcyIsIk1JRF9Nb25zdGVySW5mbyIsIk1JRF9Mb2dpY0ZyYW1lU3luYyIsIm9uZXJyb3IiLCJvbmNsb3NlIiwic2VuZHdzbWVzc2FnZSIsIkNMT1NFRCIsIkNMT1NJTkciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7OztBQUlBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBcEIsRUFFQTs7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHO0FBQ2JDLEVBQUFBLE9BQU8sRUFBRSxLQURJO0FBQ0c7QUFDaEJDLEVBQUFBLFVBQVUsRUFBRSxLQUZDO0FBRU07QUFDbkJDLEVBQUFBLFVBQVUsRUFBRSxJQUhDO0FBSWJDLEVBQUFBLGdCQUFnQixFQUFFLElBSkw7QUFLYkMsRUFBQUEsZUFBZSxFQUFFLEtBTEo7QUFNYkMsRUFBQUEsbUJBQW1CLEVBQUUsSUFOUjtBQVFiQyxFQUFBQSxLQUFLLEVBQUUsaUJBQVc7QUFDZEMsSUFBQUEsWUFBWSxDQUFDLEtBQUtMLFVBQU4sQ0FBWjtBQUNBSyxJQUFBQSxZQUFZLENBQUMsS0FBS0osZ0JBQU4sQ0FBWjtBQUNBLFdBQU8sSUFBUDtBQUNILEdBWlk7QUFjYkssRUFBQUEsY0FBYyxFQUFFLDBCQUFXO0FBQ3ZCLFFBQUlDLElBQUksR0FBRyxJQUFYO0FBQ0EsU0FBS1AsVUFBTCxHQUFrQlEsVUFBVSxDQUFDLFlBQVc7QUFDcEM7QUFDQUMsTUFBQUEsRUFBRSxDQUFDQyxHQUFILENBQU8sb0JBQVA7O0FBQ0EsVUFBSWYsTUFBTSxDQUFDZ0IsRUFBUCxJQUFhLElBQWpCLEVBQXVCO0FBQ25CO0FBQ0g7O0FBRUQsVUFBSUMsSUFBSSxH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Q0FBQ2dCLEVBQVAsQ0FBVU0sSUFBVixDQUFlSCxJQUFmO0FBQ0g7QUFySUksQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB3ZWJzb2NrZXQgXG4gKi9cblxubGV0IEdsb2JhbCA9IHJlcXVpcmUoXCJjb21tb25cIilcblxuLy/lv4Pot7Pmo4DmtYtcbnZhciBIZWFydENoZWNrID0ge1xuICAgIHRpbWVvdXQ6IDUwMDAwLCAvLzUw56eSIOeojeW+ruavlOacjeWKoeWZqOWwj+S4gOeCue+8jOiuqeacjeWKoeWZqOe9kee7nOazouWKqOacieS4que8k+WGsuaXtumXtFxuICAgIHN2cnRpbWVvdXQ6IDYwMDAwLCAvLzYw56eSXG4gICAgdGltZW91dE9iajogbnVsbCxcbiAgICBzZXJ2ZXJUaW1lb3V0T2JqOiBudWxsLFxuICAgIGRpc2Nvbm5lY3Rpb25lZDogZmFsc2UsXG4gICAgcmVjb25uZWN0VGltZW91dG9iajogbnVsbCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dE9iaik7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnNlcnZlclRpbWVvdXRPYmopO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgc3RhcnRIZWFydEJlYXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMudGltZW91dE9iaiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvL+i/memHjOWPkemAgeS4gOS4quW/g+i3s++8jOWQjuerr+aUtuWIsOWQju+8jOi/lOWbnuS4gOS4quW/g+i3s+a2iOaBr++8jG9ubWVzc2FnZeaLv+WIsOi/lOWbnueahOW/g+i3s+WwseivtOaYjui/nuaOpeato+W4uFxuICAgICAgICAgICAgY2MubG9nKFwic2VuZCBoZWFydCBiZWF0Li4uXCIpXG4gICAgICAgICAgICBpZiAoR2xvYmFsLndzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH0gXG5cbiAgICAgICAgICAgIHZhciBidWZmID0gbmV3IEFycmF5QnVmZmVyKDEyKVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDMyQXJyYXkoYnVmZilcbiAgICBcbiAgICAgICAgICAgIGRhdGFbMF0gPSBHbG9iYWwuTUlEX0hlYXJ0QmVhdCAvL+a2iOaBr0lEXG4gICAgICAgICAgICBkYXRhWzFdID0gMSAvL+a2iOaBr+mVv+W6plxuICAgICAgICAgICAgZGF0YVsyXSA9IDAgLy9hbnl0aGluZyDpmo/mhI/loavlhYXkuIDkuKrmlbBcblxuICAgICAgICAgICAgR2xvYmFsLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgICBzZWxmLnNlcnZlclRpbWVvdXRPYmogPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyAvL+W/g+i3s+i2heaXtuS4u+WKqOaWreW8gFxuICAgICAgICAgICAgICAgIGNjLmxvZyhcImNsb3NlIGNvbm5lY3Rpb24uLi5cIilcbiAgICAgICAgICAgICAgICBpZiAoR2xvYmFsLndzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfSBcbiAgICAgICAgICAgICAgICBHbG9iYWwud3MuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAvL3NlbGYuZGlzY29ubmVjdGlvbmVkID0gdHJ1ZVxuICAgICAgICAgICAgfSwgc2VsZi5zdnJ0aW1lb3V0KVxuICAgICAgICB9LCB0aGlzLnRpbWVvdXQpXG4gICAgfSxcblxuICAgIGhhc0Rpc2Nvbm5lY3RlZDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlzY29ubmVjdGlvbmVkXG4gICAgfSxcblxuICAgIHN0b3BSZWNvbm5lY3RUaW1lcjogZnVuY3Rpb24oKXtcbiAgICAgICAgLy9jYy5sb2coXCJjbG9zZSByZWNvbm5lY3RUaW1lb3V0Li4uXCIpXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnJlY29ubmVjdFRpbWVvdXRvYmopO1xuICAgIH1cbn1cblxuLyoqXG4gKiDmtojmga/lm57lpI3lpITnkIZcbiAqL1xudmFyIE1lc3NhZ2VTdGF0ZUZ1bmMgPSB7XG4gICAgLyoqXG4gICAgICog5raI5oGv6Kej5p6QIFxuICAgICAqIDA6IOa2iOaBr2lkXG4gICAgICogMe+8mua2iOaBr+mVv+W6plxuICAgICAqIDLvvJpzZXNzaW9uaWRcbiAgICAgKiAz77yabm9kZXggeOWdkOagh+ato+i0n+agh+iusFxuICAgICAqIDTvvJpub2RleCB45Z2Q5qCH5YC8XG4gICAgICogNe+8mm5vZGV5IHnlnZDmoIfmraPotJ/moIforrBcbiAgICAgKiA277yabm9kZXkgeeWdkOagh+WAvCBcbiAgICAgKi9cbiAgICBvbmxvZ2luOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIFxuICAgICAgICBpZiAoZGF0YVsyXSA9PSAxKSB7XG4gICAgICAgICAgICBHbG9iYWwubXlTZXNzaW9uSWQgPSBkYXRhWzNdXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9sb2dpbjogXCIsIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0sIGRhdGFbNl0sIGRhdGFbN10sIGRhdGFbOF0pXG4gICAgICAgIEdsb2JhbC5Mb2dpblN1Y2MgPSBkYXRhWzJdXG4gICAgICAgIHZhciBub2RleCA9IGRhdGFbNV1cbiAgICAgICAgdmFyIG5vZGV5ID0gZGF0YVs3XVxuICAgICAgICBpZiAoZGF0YVs0XSA9PSAyKXtcbiAgICAgICAgICAgIG5vZGV4ID0gMCAtIG5vZGV4XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFbNl0gPT0gMil7XG4gICAgICAgICAgICBub2RleSA9IDAgLSBub2RleVxuICAgICAgICB9XG4gICAgICAgIEdsb2JhbC5Nb3N0ZXJQb3NYID0gbm9kZXhcbiAgICAgICAgR2xvYmFsLk1vc3RlclBvc1kgPSBub2RleVxuICAgICAgICBHbG9iYWwuTW9uc3RlclNjb3JlID0gZGF0YVs4XVxuICAgIH0sXG5cbiAgICBvbmxvZ291dDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIga2V5ID0gZGF0YVsyXS50b1N0cmluZygpXG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX2xvZ291dCwgc2Vzc2lvbmlkOiBcIiwga2V5KVxuICAgICAgICBHbG9iYWwuRGVsUGxheWVySWRzLnB1c2goa2V5KVxuICAgICAgICBHbG9iYWwuUGxheWVyU2Vzc2lvbk1hcC5kZWxldGUoa2V5KVxuICAgIH0sXG5cbiAgICBvbm1vdmU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfbW92ZTogXCIsIGRhdGFbMV0sIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0sIGRhdGFbNl0pXG4gICAgICAgIHZhciBrZXkgPSBkYXRhWzZdLnRvU3RyaW5nKClcbiAgICAgICAgdmFyIG5vZGV4ID0gZGF0YVszXVxuICAgICAgICB2YXIgbm9kZXkgPSBkYXRhWzVdXG4gICAgICAgIGlmIChkYXRhWzJdID09IDIpe1xuICAgICAgICAgICAgbm9kZXggPSAwIC0gbm9kZXhcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVs0XSA9PSAyKXtcbiAgICAgICAgICAgIG5vZGV5ID0gMCAtIG5vZGV5XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHBsYXllclByb3AgPSB7XG4gICAgICAgICAgICBzZXNzaW9uSWQ6IGRhdGFbNl0sXG4gICAgICAgICAgICBub2RleDogbm9kZXgsXG4gICAgICAgICAgICBub2RleTogbm9kZXlcbiAgICAgICAgfVxuICAgICAgICBpZiAoR2xvYmFsLlBsYXllclNlc3Npb25NYXAuaGFzKGtleSkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIEdsb2JhbC5QbGF5ZXJTZXNzaW9uTWFwLnNldChrZXksIHBsYXllclByb3ApXG4gICAgICAgIH1cbiAgICAgICAgR2xvYmFsLk5ld3BsYXllck1hcC5zZXQoa2V5LCBwbGF5ZXJQcm9wKVxuICAgICAgICBHbG9iYWwubmV3UGxheWVySWRzLnB1c2goa2V5KVxuICAgICAgICAvL2NjLmxvZyhcIk1JRF9tb3ZlIHB1cnBsZSBtb25zdGVyczogXCIsIEdsb2JhbC5uZXdQbGF5ZXJJZHMubGVuZ3RoLCBrZXksIEdsb2JhbC5OZXdwbGF5ZXJNYXAuaGFzKGtleSkpXG4gICAgfSxcblxuICAgIG9uQnVtcDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICAwOiDmtojmga9JRFxuICAgICAgICAgICAgMe+8mua2iOaBr+mVv+W6plxuICAgICAgICAgICAgMjog5oiQ5Yqf5aSx6LSl5qCH5b+XICjlpLHotKXliJnlj6rpnIDopoHliY3kuInkuKrlrZfmrrUpXG4gICAgICAgICAgICAzOiDmmJ/mmJ945Z2Q5qCH5q2j6LSf5qCH5b+XXG4gICAgICAgICAgICA0OiDmmJ/mmJ945Z2Q5qCHXG4gICAgICAgICAgICA177ya5pif5pifeeWdkOagh+ato+i0n+agh+W/l1xuICAgICAgICAgICAgNu+8muaYn+aYn3nlnZDmoIdcbiAgICAgICAgICAgICovXG5cbiAgICAgICAgaWYgKGRhdGFbMl0gPT0gMCl7IC8v5aSx6LSlXG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9CdW1wIGZhaWwgLi4uIFwiKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX0J1bXA6IFwiLCBkYXRhWzFdLCBkYXRhWzJdLCBkYXRhWzNdLCBkYXRhWzRdLCBkYXRhWzVdLCBkYXRhWzZdLCBkYXRhWzddKVxuXG4gICAgICAgIHZhciBub2RleCA9IGRhdGFbNF1cbiAgICAgICAgdmFyIG5vZGV5ID0gZGF0YVs2XVxuICAgICAgICBpZiAoZGF0YVszXSA9PSAyKXtcbiAgICAgICAgICAgIG5vZGV4ID0gMCAtIG5vZGV4XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRhdGFbNV0gPT0gMil7XG4gICAgICAgICAgICBub2RleSA9IDAgLSBub2RleVxuICAgICAgICB9XG4gICAgICAgIEdsb2JhbC5CdW1wZWRQbGF5ZXJJZCA9IGRhdGFbN11cbiAgICAgICAgdmFyIHN0YXJQcm9wID0ge1xuICAgICAgICAgICAgbm9kZXg6IG5vZGV4LFxuICAgICAgICAgICAgbm9kZXk6IG5vZGV5XG4gICAgICAgIH1cbiAgICAgICAgR2xvYmFsLm5ld1N0YXJQb3Muc2V0KEdsb2JhbC5uZXdTdGFyS2V5LCBzdGFyUHJvcClcbiAgICB9LFxuXG4gICAgb25IZWFydEJlYXQ6IGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9IZWFydEJlYXQuLi5cIilcbiAgICB9LFxuXG4gICAgb25TdGFyQm9ybjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9TdGFyQm9ybjogXCIsIGRhdGFbMl0sIGRhdGFbM10sIGRhdGFbNF0sIGRhdGFbNV0pXG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgMDog5raI5oGvSURcbiAgICAgICAgICAgIDHvvJrmtojmga/plb/luqZcbiAgICAgICAgICAgIDI6IOaYn+aYn3jlnZDmoIfmraPotJ/moIflv5dcbiAgICAgICAgICAgIDM6IOaYn+aYn3jlnZDmoIdcbiAgICAgICAgICAgIDTvvJrmmJ/mmJ955Z2Q5qCH5q2j6LSf5qCH5b+XXG4gICAgICAgICAgICA177ya5pif5pifeeWdkOagh1xuICAgICAgICAgKi9cbiAgICAgICAgdmFyIG5vZGV4ID0gZGF0YVszXVxuICAgICAgICB2YXIgbm9kZXkgPSBkYXRhWzVdXG4gICAgICAgIGlmIChkYXRhWzJdID09IDIpe1xuICAgICAgICAgICAgbm9kZXggPSAwIC0gbm9kZXhcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YVs0XSA9PSAyKXtcbiAgICAgICAgICAgIG5vZGV5ID0gMCAtIG5vZGV5XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXJQcm9wID0ge1xuICAgICAgICAgICAgbm9kZXg6IG5vZGV4LFxuICAgICAgICAgICAgbm9kZXk6IG5vZGV5XG4gICAgICAgIH1cbiAgICAgICAgR2xvYmFsLm5ld1N0YXJQb3Muc2V0KEdsb2JhbC5uZXdTdGFyS2V5LCBzdGFyUHJvcClcbiAgICB9LFxuXG4gICAgb25HTTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9HTS4uLlwiKVxuICAgIH0sXG5cbiAgICBPbmxpbmU0T3RoZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfT25saW5lNE90aGVyOiBcIiwgZGF0YVsyXSwgZGF0YVszXSwgZGF0YVs0XSwgZGF0YVs1XSwgZGF0YVs2XSlcbiAgICAgICAgdmFyIGtleSA9IGRhdGFbNl0udG9TdHJpbmcoKVxuICAgICAgICB2YXIgbm9kZXggPSBkYXRhWzNdXG4gICAgICAgIHZhciBub2RleSA9IGRhdGFbNV1cbiAgICAgICAgaWYgKGRhdGFbMl0gPT0gMil7XG4gICAgICAgICAgICBub2RleCA9IDAgLSBub2RleFxuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhWzRdID09IDIpe1xuICAgICAgICAgICAgbm9kZXkgPSAwIC0gbm9kZXlcbiAgICAgICAgfVxuXG4gICAgICAgIGNjLmxvZyhcInBvczogXCIsIG5vZGV4LCBub2RleSlcbiAgICAgICAgdmFyIHBsYXllclByb3AgPSB7XG4gICAgICAgICAgICBzZXNzaW9uSWQ6IGRhdGFbNl0sXG4gICAgICAgICAgICBub2RleDogbm9kZXgsXG4gICAgICAgICAgICBub2RleTogbm9kZXlcbiAgICAgICAgfVxuICAgICAgICBpZiAoR2xvYmFsLlBsYXllclNlc3Npb25NYXAuaGFzKGtleSkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIEdsb2JhbC5QbGF5ZXJTZXNzaW9uTWFwLnNldChrZXksIHBsYXllclByb3ApXG4gICAgICAgIH1cbiAgICAgICAgR2xvYmFsLk5ld3BsYXllck1hcC5zZXQoa2V5LCBwbGF5ZXJQcm9wKVxuICAgICAgICBHbG9iYWwubmV3UGxheWVySWRzLnB1c2goa2V5KVxuICAgICAgICBHbG9iYWwuc3luY09ubGluZTRPdGhlciA9IHRydWVcbiAgICB9LFxuXG4gICAgb25SZWdpc3RlcjogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX1JlZ2lzdGVyOiBcIiwgZGF0YVsyXSlcbiAgICAgICAgR2xvYmFsLlJlZ2lzdGVyU3VjYyA9IGRhdGFbMl1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIG9ubHkgcmVxdWVzdCwgbm90IHJlc3BvbnNlLi4uXG4gICAgICovXG4gICAgb25TeW5jUG9zOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNjLmxvZyhcIndzIG1lc3NhZ2UgTUlEX1N5bmNQb3MuLi5cIilcbiAgICB9LFxuXG4gICAgb25Nb25zdGVySW5mbzogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICBjYy5sb2coXCJ3cyBtZXNzYWdlIE1JRF9Nb25zdGVySW5mbzogXCIsIGRhdGFbMl0sIGRhdGFbM10pXG4gICAgICAgIEdsb2JhbC5Nb25zdGVyU2NvcmUgPSBkYXRhWzNdXG4gICAgfSxcblxuICAgIG9uTG9naWNGcmFtZVN5bmM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgY2MubG9nKFwid3MgbWVzc2FnZSBNSURfTG9naWNGcmFtZVN5bmM6IFwiLCBkYXRhWzJdLCBkYXRhWzNdLCBkYXRhWzRdLCBkYXRhWzVdLCBkYXRhWzZdKVxuICAgICAgICAgXG4gICAgfVxufVxuXG5jYy5DbGFzcyh7XG4gICAgLy9leHRlbmRzOiBjYy5Db21wb25lbnQsXG5cbiAgICAvKlxuICAgIHJlYWR5U3RhdGU6XG4gICAgICAgIENPTk5FQ1RJTkcgMFxuICAgICAgICBPUEVOICAgICAgIDFcbiAgICAgICAgQ0xPU0lORyAgICAyXG4gICAgICAgIENMT1NFRCAgICAgM1xuICAgICovXG4gICBcbiAgICBDYW5TZW5kTXNnOiBmdW5jdGlvbigpe1xuICAgICAgICBpZiAoR2xvYmFsLndzID09IG51bGwpe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5DT05ORUNUSU5HIHx8IEdsb2JhbC53cy5yZWFkeVN0YXRlID09IFdlYlNvY2tldC5PUEVOKVxuICAgIH0sIFxuXG4gICAgc3dDb25uZWN0OiBmdW5jdGlvbigpe1xuICAgICAgICBpZiAoR2xvYmFsLndzICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vcmV0dXJuXG4gICAgICAgICAgICAvL2NjLmxvZyhcInJlYWR5U3RhdGU6IFwiLCBHbG9iYWwud3MucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgIGlmIChHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ09OTkVDVElORyB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuT1BFTikgeyAvL+W3sue7j+i/nuS4iuWwseS4jeW/heWGjei/nlxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBjYy5sb2coXCJhZGRyOiBcIiwgR2xvYmFsLndzQWRkciwgR2xvYmFsLndzID09IG51bGwpXG4gICAgICAgIHZhciB3cyA9IG5ldyBXZWJTb2NrZXQoR2xvYmFsLndzQWRkcik7XG4gICAgICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIGNjLmxvZyhcIndzIG9wZW46IFwiLCB3cy5yZWFkeVN0YXRlKVxuICAgICAgICAgICAgLy/lj5HpgIHlv4Pot7NcbiAgICAgICAgICAgIEhlYXJ0Q2hlY2sucmVzZXQoKS5zdGFydEhlYXJ0QmVhdCgpXG4gICAgICAgIH1cblxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IG5ldyBVaW50MzJBcnJheShlLmRhdGEpXG4gICAgICAgICAgICB2YXIgbXNnaWQgPSBkYXRhWzBdIFxuICAgICAgICAgICAgc3dpdGNoIChtc2dpZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9sb2dpbjpcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbmxvZ2luKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9sb2dvdXQ6XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25sb2dvdXQoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBHbG9iYWwuTUlEX21vdmU6XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25tb3ZlKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9CdW1wOlxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9uQnVtcChkYXRhKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9IZWFydEJlYXQ6XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25IZWFydEJlYXQoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfU3RhckJvcm46XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25TdGFyQm9ybihkYXRhKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9HTTpcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbkdNKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSBHbG9iYWwuTUlEX09ubGluZTRPdGhlcjpcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5PbmxpbmU0T3RoZXIoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBjYXNlIEdsb2JhbC5NSURfUmVnaXN0ZXI6XG4gICAgICAgICAgICAgICAgICAgIE1lc3NhZ2VTdGF0ZUZ1bmMub25SZWdpc3RlcihkYXRhKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9TeW5jUG9zOlxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9uU3luY1BvcyhkYXRhKVxuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIGNhc2UgR2xvYmFsLk1JRF9Nb25zdGVySW5mbzpcbiAgICAgICAgICAgICAgICAgICAgTWVzc2FnZVN0YXRlRnVuYy5vbk1vbnN0ZXJJbmZvKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgY2FzZSBHbG9iYWwuTUlEX0xvZ2ljRnJhbWVTeW5jOlxuICAgICAgICAgICAgICAgICAgICBNZXNzYWdlU3RhdGVGdW5jLm9uTG9naWNGcmFtZVN5bmMoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBjYy5sb2coXCLmnKrnn6Ug5raI5oGvaWQ6IFwiLCBtc2dpZClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy/lj5HpgIHlv4Pot7NcbiAgICAgICAgICAgIEhlYXJ0Q2hlY2sucmVzZXQoKS5zdGFydEhlYXJ0QmVhdCgpXG4gICAgICAgIH1cblxuICAgICAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGNjLmxvZyhcIndzIGVycm9yOiBcIiwgd3MucmVhZHlTdGF0ZSlcbiAgICAgICAgICAgIC8vR2xvYmFsLndzID0gbnVsbFxuICAgICAgICAgICAgaWYgKEhlYXJ0Q2hlY2suaGFzRGlzY29ubmVjdGVkKCkgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBIZWFydENoZWNrLnN0b3BSZWNvbm5lY3RUaW1lcigpXG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5yZWNvbm5lY3RUaW1lb3V0b2JqID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zd0Nvbm5lY3QoKTtcbiAgICAgICAgICAgICAgICB9LCAxMDAwKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5zdG9wUmVjb25uZWN0VGltZXIoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBjYy5sb2coXCJ3cyBjbG9zZTogXCIsIHdzLnJlYWR5U3RhdGUpXG4gICAgICAgICAgICAvL0dsb2JhbC53cyA9IG51bGxcbiAgICAgICAgICAgIGlmIChIZWFydENoZWNrLmhhc0Rpc2Nvbm5lY3RlZCgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgSGVhcnRDaGVjay5zdG9wUmVjb25uZWN0VGltZXIoKVxuICAgICAgICAgICAgICAgIEhlYXJ0Q2hlY2sucmVjb25uZWN0VGltZW91dG9iaiA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc3dDb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgfSwgMTAwMClcbiAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgIEhlYXJ0Q2hlY2suc3RvcFJlY29ubmVjdFRpbWVyKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNjLmxvZyhcImdsb2JhbCB3cyBpbml0LCBzdGF0ZTogXCIsIHdzLnJlYWR5U3RhdGUpXG4gICAgICAgIEdsb2JhbC53cyA9IHdzXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSAg5YW35L2T5pWw5o2uLCAx77ya6ZW/5bqm77yMMu+8muaYr+WQpuW5v+aSre+8jDPvvJouLi4g5YW35L2T5raI5oGv5pWw5o2uXG4gICAgICovXG4gICAgc2VuZHdzbWVzc2FnZTogZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgIFxuICAgICAgICBpZiAoR2xvYmFsLndzID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEdsb2JhbC53cyAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoR2xvYmFsLndzLnJlYWR5U3RhdGUgPT0gV2ViU29ja2V0LkNMT1NFRCB8fCBHbG9iYWwud3MucmVhZHlTdGF0ZSA9PSBXZWJTb2NrZXQuQ0xPU0lORykgeyAvL+ato+WcqOaWreW8gOaIluiAheW3sue7j+aWreW8gO+8jOWImeS4jeiDveWPkemAgea2iOaBr1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jYy5sb2coXCJ3cyBzZW5kd3NtZXNzYWdlOiBcIiwgR2xvYmFsLndzLnJlYWR5U3RhdGUpXG4gICAgICAgIEdsb2JhbC53cy5zZW5kKGRhdGEpXG4gICAgfVxufSkiXX0=